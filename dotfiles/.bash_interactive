#!/usr/bin/env bash

##############################
#
#     BASH-SPECIFIC   INTERACTIVE
#
##############################

# if not running interactively then do nothing
case "$-" in
  ( *i* ) ;;
  ( *   ) return ;;
esac

#PS1="[ Bash\V ]--[ \j jobs ]--[ $? ]--[ \w ]--> "





##############################
#
#     ALIASES
#
##############################

# shell type
alias shell-interactive='[[ "$-" == *i* ]] && echo "interactive shell" || echo "non-interactive shell"'
alias       shell-login="shopt -q login_shell && echo 'login shell'    || echo 'non-login shell'"





##############################
#
#     MATH AND DATA
#
##############################

function gen-string {
  local -i DEFAULT_LEN
           DEFAULT_LEN=8

  case $# in
    ( 0 ) ;;
    ( 1 ) [[ $1 =~ ^[0-9]*$ ]] && DEFAULT_LEN=$1 || { echo -e 'Error:   the argument must be an integer.\nExiting...' ; return 1 ; } ;;
    ( * ) echo -e 'Usage:   gen-string [len]\nExiting...' ; return 1 ;;
  esac

  cat /dev/random | tr -dc 'a-zA-Z0-9' | fold -w $DEFAULT_LEN | head -n 1

  return 0
}





#----------[ TO REVIEW ]

# ascii2bin hello world | pbcopy
# bin2ascii $(pbpaste)

function ordbin () {
  a=$(printf %d "'$1")                     # convert ASCII to dec
  b=$(printf "obase=2; ibase=10; $a" | bc) # convert   dec to bin
  printf %08d "$b"                         # convert   bin to bin-8
}
function ascii2bin () {
  printf "$*" | while IFS= read -rn1 char ; do
    ordbin "$char" | tr -d '\n'
    printf ' '
  done
  printf \\n
}

function bin2ascii () {
  for bin in $* ; do
    printf "\\$(printf "obase=8; ibase=2; $bin" | bc)" | tr -d \\n
  done
  printf \\n
}
